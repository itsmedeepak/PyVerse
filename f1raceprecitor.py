# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n8tDlXoN3D4JWiWUl-WPjG2wfc9qMR1C

NEW MODEL
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

# Load datasets (update paths if needed)
drivers = pd.read_csv("/content/drivers.csv")
constructor = pd.read_csv("/content/constructors.csv")
driver_standings = pd.read_csv("/content/driver_standings.csv")
constructor_standings = pd.read_csv("/content/constructor_standings.csv")
results = pd.read_csv("/content/results.csv")
constructor_results = pd.read_csv("/content/constructor_results.csv")

# Merge driver info into results
data = results.merge(drivers, on="driverId", how="left")
# Merge constructor info
data = data.merge(constructor, on="constructorId", how="left")
# Using average points per race for realistic values
driver_points_avg = results.groupby('driverId')['points'].mean().to_dict()
constructor_points_avg = results.groupby('constructorId')['points'].mean().to_dict()

data['driver_points'] = data['driverId'].map(driver_points_avg)
data['constructor_points'] = data['constructorId'].map(constructor_points_avg)

data.head()

# Target = 1 if driver won the race, else 0
data['target'] = (data['positionOrder'] == 1).astype(int)

features = ['grid', 'driver_points', 'constructor_points']
X = data[features]
y = data['target']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Example future race: use actual driver IDs
future_race = pd.DataFrame({
    'driverId': [1, 2, 3, 4, 5],
    'grid': [1, 2, 3, 4, 5]       # starting positions
})

# Maping driver names
driver_names = drivers.set_index('driverId')['surname'].to_dict()
future_race['driver_name'] = future_race['driverId'].map(driver_names)

# Maping latest constructor for each driver from results
latest_race_per_driver = results.groupby('driverId').apply(lambda x: x.sort_values('raceId', ascending=False).iloc[0])
driver_constructor_map = latest_race_per_driver.set_index('driverId')['constructorId'].to_dict()
future_race['constructorId'] = future_race['driverId'].map(driver_constructor_map)

# Mapingg constructor names
constructor_names = constructor.set_index('constructorId')['name'].to_dict()
future_race['constructor_name'] = future_race['constructorId'].map(constructor_names)

# Maping average points per race for drivers and constructors
driver_points_avg = results.groupby('driverId')['points'].mean().to_dict()
constructor_points_avg = results.groupby('constructorId')['points'].mean().to_dict()
future_race['driver_points'] = future_race['driverId'].map(driver_points_avg)
future_race['constructor_points'] = future_race['constructorId'].map(constructor_points_avg)

future_race

features = ['grid', 'driver_points', 'constructor_points']
X_future = future_race[features]

# Predict probability of winning
future_race['win_probability'] = model.predict_proba(X_future)[:,1]
future_race

# Sorting by win probability descending
future_race_sorted = future_race.sort_values('win_probability', ascending=False)

# final table
future_race_sorted[['driver_name', 'constructor_name', 'grid', 'driver_points', 'constructor_points', 'win_probability']]

# Select top 3 drivers by win probability
top3 = future_race_sorted.head(3)

# Display a clean leaderboard
for i, row in top3.iterrows():
    print(f"Position {i+1}: {row['driver_name']} ({row['constructor_name']})")
    print(f"  Grid: {row['grid']}, Avg Driver Points: {row['driver_points']:.1f}, "
          f"Avg Constructor Points: {row['constructor_points']:.1f}, "
          f"Win Probability: {row['win_probability']:.2%}\n")

# Sorting by win_probability descending
future_race_sorted = future_race.sort_values('win_probability', ascending=False)

# top drivers
future_race_sorted[['driver_name', 'constructor_name', 'grid', 'driver_points', 'constructor_points', 'win_probability']]

import matplotlib.pyplot as plt

# Sort by win probability descending
future_race_sorted = future_race.sort_values('win_probability', ascending=False)

#  Bar chart of win probabilities
plt.figure(figsize=(12,6))
bars = plt.bar(future_race_sorted['driver_name'], future_race_sorted['win_probability'], color='royalblue')

# Add probability values on top of bars
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2.0, height + 0.01, f"{height:.2%}", ha='center', va='bottom')

plt.ylabel('Win Probability')
plt.xlabel('Driver')
plt.title('Predicted Win Probabilities for Future Race')
plt.ylim(0, 1)  # set y-axis between 0 and 1
plt.show()
